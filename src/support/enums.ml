(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 *)

type syntax =
  [ `Iml [@printer fun fmt _ -> Format.pp_print_string fmt "iml"] [@name "iml"]
  | `Reason
    [@printer fun fmt _ -> Format.pp_print_string fmt "reason"]
    [@name "reason"]
  ]
[@@deriving yojson, show { with_path = false }]

let syntax_of_yojson json = syntax_of_yojson (`List [ json ])

let syntax_to_yojson e =
  match syntax_to_yojson e with
  | `List [ json ] -> json
  | json -> json

type inductstructuralstyle =
  [ `Multiplicative
    [@printer fun fmt _ -> Format.pp_print_string fmt "multiplicative"]
    [@name "multiplicative"]
  | `Additive
    [@printer fun fmt _ -> Format.pp_print_string fmt "additive"]
    [@name "additive"]
  ]
[@@deriving yojson, show { with_path = false }]

let inductstructuralstyle_of_yojson json =
  inductstructuralstyle_of_yojson (`List [ json ])

let inductstructuralstyle_to_yojson e =
  match inductstructuralstyle_to_yojson e with
  | `List [ json ] -> json
  | json -> json

type verifyresult =
  [ `Proved
    [@printer fun fmt _ -> Format.pp_print_string fmt "proved"]
    [@name "proved"]
  | `Proved_upto
    [@printer fun fmt _ -> Format.pp_print_string fmt "proved_upto"]
    [@name "proved_upto"]
  | `Refuted
    [@printer fun fmt _ -> Format.pp_print_string fmt "refuted"]
    [@name "refuted"]
  | `Unknown
    [@printer fun fmt _ -> Format.pp_print_string fmt "unknown"]
    [@name "unknown"]
  ]
[@@deriving yojson, show { with_path = false }]

let verifyresult_of_yojson json = verifyresult_of_yojson (`List [ json ])

let verifyresult_to_yojson e =
  match verifyresult_to_yojson e with
  | `List [ json ] -> json
  | json -> json

type instancetype =
  [ `Counterexample
    [@printer fun fmt _ -> Format.pp_print_string fmt "counterexample"]
    [@name "counterexample"]
  | `Instance
    [@printer fun fmt _ -> Format.pp_print_string fmt "instance"]
    [@name "instance"]
  ]
[@@deriving yojson, show { with_path = false }]

let instancetype_of_yojson json = instancetype_of_yojson (`List [ json ])

let instancetype_to_yojson e =
  match instancetype_to_yojson e with
  | `List [ json ] -> json
  | json -> json

type methodtype =
  [ `Unroll
    [@printer fun fmt _ -> Format.pp_print_string fmt "unroll"]
    [@name "unroll"]
  | `Ext_solver
    [@printer fun fmt _ -> Format.pp_print_string fmt "ext_solver"]
    [@name "ext_solver"]
  | `Auto
    [@printer fun fmt _ -> Format.pp_print_string fmt "auto"]
    [@name "auto"]
  | `Induct
    [@printer fun fmt _ -> Format.pp_print_string fmt "induct"]
    [@name "induct"]
  ]
[@@deriving yojson, show { with_path = false }]

let methodtype_of_yojson json = methodtype_of_yojson (`List [ json ])

let methodtype_to_yojson e =
  match methodtype_to_yojson e with
  | `List [ json ] -> json
  | json -> json

type instanceresult =
  [ `Unsat
    [@printer fun fmt _ -> Format.pp_print_string fmt "unsat"]
    [@name "unsat"]
  | `Unsat_upto
    [@printer fun fmt _ -> Format.pp_print_string fmt "unsat_upto"]
    [@name "unsat_upto"]
  | `Sat [@printer fun fmt _ -> Format.pp_print_string fmt "sat"] [@name "sat"]
  | `Unknown
    [@printer fun fmt _ -> Format.pp_print_string fmt "unknown"]
    [@name "unknown"]
  ]
[@@deriving yojson, show { with_path = false }]

let instanceresult_of_yojson json = instanceresult_of_yojson (`List [ json ])

let instanceresult_to_yojson e =
  match instanceresult_to_yojson e with
  | `List [ json ] -> json
  | json -> json

type inducttype =
  [ `Functional
    [@printer fun fmt _ -> Format.pp_print_string fmt "functional"]
    [@name "functional"]
  | `Structural
    [@printer fun fmt _ -> Format.pp_print_string fmt "structural"]
    [@name "structural"]
  | `Default
    [@printer fun fmt _ -> Format.pp_print_string fmt "default"]
    [@name "default"]
  ]
[@@deriving yojson, show { with_path = false }]

let inducttype_of_yojson json = inducttype_of_yojson (`List [ json ])

let inducttype_to_yojson e =
  match inducttype_to_yojson e with
  | `List [ json ] -> json
  | json -> json
