diff --git a/.gitignore b/.gitignore
index ac80fd8..8e2d52d 100644
--- a/.gitignore
+++ b/.gitignore
@@ -6,4 +6,5 @@ docs/_out/
 docs/imandra_http_api_client/settings.py
 *.dec
 dist/
-.imandra_init.log
\ No newline at end of file
+.imandra_init.log
+_build/
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 617b67d..8e35fc9 100644
--- a/Makefile
+++ b/Makefile
@@ -19,6 +19,9 @@ generate-imandra-http-api-client:
 	mv src/imandra_http_api_client_README.md docs/imandra_http_api_client/README.md
 	mv src/imandra_http_api_client/docs/* docs/imandra_http_api_client/imandra_http_api_client/docs/.
 
+generate-imandra-http-api-client-ocaml:
+	docker run -u $(id -u):$(id -g) --rm -v ${PWD}:/local openapitools/openapi-generator-cli generate -i /local/imandra_http_api_client.swagger.yaml -g ocaml -o /local/src/imandra_http_api_client_ocaml  -p packageName=imandra_http_api_client_ocaml -p generateSourceCodeOnly=true
+
 generate-docs:
 	make -C docs all
 
diff --git a/src/imandra_http_api_client_ocaml/.openapi-generator-ignore b/src/imandra_http_api_client_ocaml/.openapi-generator-ignore
new file mode 100644
index 0000000..7484ee5
--- /dev/null
+++ b/src/imandra_http_api_client_ocaml/.openapi-generator-ignore
@@ -0,0 +1,23 @@
+# OpenAPI Generator Ignore
+# Generated by openapi-generator https://github.com/openapitools/openapi-generator
+
+# Use this file to prevent files from being overwritten by the generator.
+# The patterns follow closely to .gitignore or .dockerignore.
+
+# As an example, the C# client generator defines ApiClient.cs.
+# You can make changes and tell OpenAPI Generator to ignore just this file by uncommenting the following line:
+#ApiClient.cs
+
+# You can match any string of characters against a directory, file or extension with a single asterisk (*):
+#foo/*/qux
+# The above matches foo/bar/qux and foo/baz/qux, but not foo/bar/baz/qux
+
+# You can recursively match patterns against a directory, file or extension with a double asterisk (**):
+#foo/**/qux
+# This matches foo/bar/qux, foo/baz/qux, and foo/bar/baz/qux
+
+# You can also negate patterns with an exclamation (!).
+# For example, you can ignore all files in a docs folder with the file extension .md:
+#docs/*.md
+# Then explicitly reverse the ignore rule for a single file:
+#!docs/README.md
diff --git a/src/imandra_http_api_client_ocaml/.openapi-generator/FILES b/src/imandra_http_api_client_ocaml/.openapi-generator/FILES
new file mode 100644
index 0000000..07beeb8
--- /dev/null
+++ b/src/imandra_http_api_client_ocaml/.openapi-generator/FILES
@@ -0,0 +1,35 @@
+.openapi-generator-ignore
+README.md
+dune
+dune-project
+imandra_http_api_client_ocaml.opam
+src/apis/default_api.ml
+src/apis/default_api.mli
+src/models/eval_request_src.ml
+src/models/eval_response.ml
+src/models/hints.ml
+src/models/induct_functional_body.ml
+src/models/induct_structural_body.ml
+src/models/instance_request_name.ml
+src/models/instance_request_src.ml
+src/models/instance_response.ml
+src/models/method_body.ml
+src/models/method_ext_solver_body.ml
+src/models/method_induct_body.ml
+src/models/method_induct_body_body.ml
+src/models/method_unroll_body.ml
+src/models/model_method.ml
+src/models/printer_details.ml
+src/models/response_error.ml
+src/models/response_instance.ml
+src/models/response_model.ml
+src/models/up_to_body.ml
+src/models/verify_request_name.ml
+src/models/verify_request_src.ml
+src/models/verify_response.ml
+src/models/verify_response_body.ml
+src/models/with_instance_body.ml
+src/models/with_unknown_reason_body.ml
+src/support/enums.ml
+src/support/jsonSupport.ml
+src/support/request.ml
diff --git a/src/imandra_http_api_client_ocaml/.openapi-generator/VERSION b/src/imandra_http_api_client_ocaml/.openapi-generator/VERSION
new file mode 100644
index 0000000..757e674
--- /dev/null
+++ b/src/imandra_http_api_client_ocaml/.openapi-generator/VERSION
@@ -0,0 +1 @@
+7.0.0-SNAPSHOT
\ No newline at end of file
diff --git a/src/imandra_http_api_client_ocaml/README.md b/src/imandra_http_api_client_ocaml/README.md
new file mode 100644
index 0000000..3f97916
--- /dev/null
+++ b/src/imandra_http_api_client_ocaml/README.md
@@ -0,0 +1,26 @@
+# 
+Query Imandra via HTTP. See also https://github.com/aestheticIntegration/bs-imandra-client for a sample client implementation and OCaml API types.
+
+This OCaml package is automatically generated by the [OpenAPI Generator](https://openapi-generator.tech) project:
+
+- API version: 0.0.1
+- Package version: 1.0.0
+- Build package: org.openapitools.codegen.languages.OCamlClientCodegen
+
+## Requirements.
+
+OCaml 4.x
+
+## Installation
+
+Please run the following commands to build the package `imandra_http_api_client_ocaml`:
+
+```sh
+opam install ppx_deriving_yojson cohttp ppx_deriving cohttp-lwt-unix ocaml-migrate-parsetree
+eval $(opam env)
+dune build
+```
+
+## Getting Started
+
+TODO
diff --git a/src/imandra_http_api_client_ocaml/dune b/src/imandra_http_api_client_ocaml/dune
new file mode 100644
index 0000000..82f4b12
--- /dev/null
+++ b/src/imandra_http_api_client_ocaml/dune
@@ -0,0 +1,9 @@
+(include_subdirs unqualified)
+(library
+   (name imandra_http_api_client_ocaml)
+   (public_name imandra_http_api_client_ocaml)
+   (flags (:standard -w -27))
+   (libraries str cohttp-lwt-unix lwt yojson ppx_deriving_yojson.runtime)
+   (preprocess (pps ppx_deriving_yojson ppx_deriving.std))
+   (wrapped true)
+)
\ No newline at end of file
diff --git a/src/imandra_http_api_client_ocaml/dune-project b/src/imandra_http_api_client_ocaml/dune-project
new file mode 100644
index 0000000..8717323
--- /dev/null
+++ b/src/imandra_http_api_client_ocaml/dune-project
@@ -0,0 +1,2 @@
+(lang dune 1.10)
+(name imandra_http_api_client_ocaml)
\ No newline at end of file
diff --git a/src/imandra_http_api_client_ocaml/imandra_http_api_client_ocaml.opam b/src/imandra_http_api_client_ocaml/imandra_http_api_client_ocaml.opam
new file mode 100644
index 0000000..db92b01
--- /dev/null
+++ b/src/imandra_http_api_client_ocaml/imandra_http_api_client_ocaml.opam
@@ -0,0 +1,15 @@
+opam-version: "2.0"
+name: "imandra_http_api_client_ocaml"
+version: "1.0.0"
+synopsis: ""
+description: """
+Longer description
+"""
+maintainer: "Name <email>"
+authors: "Name <email>"
+license: ""
+homepage: ""
+bug-reports: ""
+dev-repo: ""
+depends: [ "ocaml" "ocamlfind" ]
+build: ["dune" "build" "-p" name]
\ No newline at end of file
diff --git a/src/imandra_http_api_client_ocaml/src/apis/default_api.ml b/src/imandra_http_api_client_ocaml/src/apis/default_api.ml
new file mode 100644
index 0000000..f5ed7f6
--- /dev/null
+++ b/src/imandra_http_api_client_ocaml/src/apis/default_api.ml
@@ -0,0 +1,75 @@
+(*
+ * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
+ *
+ * Generated by: https://openapi-generator.tech
+ *
+ *)
+
+let eval ~eval_request_src_t =
+    let open Lwt.Infix in
+    let uri = Request.build_uri "/eval/by-src" in
+    let headers = Request.default_headers in
+    let body = Request.write_as_json_body Eval_request_src.to_yojson eval_request_src_t in
+    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
+    Request.read_json_body_as (JsonSupport.unwrap Eval_response.of_yojson) resp body
+
+let get_history () =
+    let open Lwt.Infix in
+    let uri = Request.build_uri "/history" in
+    let headers = Request.default_headers in
+    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
+    Request.read_json_body_as (JsonSupport.to_string) resp body
+
+let get_status () =
+    let open Lwt.Infix in
+    let uri = Request.build_uri "/status" in
+    let headers = Request.default_headers in
+    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
+    Request.read_json_body_as (JsonSupport.to_string) resp body
+
+let instance_by_name ~instance_request_name_t =
+    let open Lwt.Infix in
+    let uri = Request.build_uri "/instance/by-name" in
+    let headers = Request.default_headers in
+    let body = Request.write_as_json_body Instance_request_name.to_yojson instance_request_name_t in
+    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
+    Request.read_json_body_as (JsonSupport.unwrap Instance_response.of_yojson) resp body
+
+let instance_by_src ~instance_request_src_t =
+    let open Lwt.Infix in
+    let uri = Request.build_uri "/instance/by-src" in
+    let headers = Request.default_headers in
+    let body = Request.write_as_json_body Instance_request_src.to_yojson instance_request_src_t in
+    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
+    Request.read_json_body_as (JsonSupport.unwrap Instance_response.of_yojson) resp body
+
+let reset () =
+    let open Lwt.Infix in
+    let uri = Request.build_uri "/reset" in
+    let headers = Request.default_headers in
+    Cohttp_lwt_unix.Client.call `POST uri ~headers >>= fun (resp, body) ->
+    Request.read_json_body_as (JsonSupport.to_string) resp body
+
+let shutdown () =
+    let open Lwt.Infix in
+    let uri = Request.build_uri "/shutdown" in
+    let headers = Request.default_headers in
+    Cohttp_lwt_unix.Client.call `POST uri ~headers >>= fun (resp, body) ->
+    Request.read_json_body_as (JsonSupport.to_string) resp body
+
+let verify_by_name ~verify_request_name_t =
+    let open Lwt.Infix in
+    let uri = Request.build_uri "/verify/by-name" in
+    let headers = Request.default_headers in
+    let body = Request.write_as_json_body Verify_request_name.to_yojson verify_request_name_t in
+    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
+    Request.read_json_body_as (JsonSupport.unwrap Verify_response.of_yojson) resp body
+
+let verify_by_src ~verify_request_src_t =
+    let open Lwt.Infix in
+    let uri = Request.build_uri "/verify/by-src" in
+    let headers = Request.default_headers in
+    let body = Request.write_as_json_body Verify_request_src.to_yojson verify_request_src_t in
+    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
+    Request.read_json_body_as (JsonSupport.unwrap Verify_response.of_yojson) resp body
+
diff --git a/src/imandra_http_api_client_ocaml/src/apis/default_api.mli b/src/imandra_http_api_client_ocaml/src/apis/default_api.mli
new file mode 100644
index 0000000..b2dc23c
--- /dev/null
+++ b/src/imandra_http_api_client_ocaml/src/apis/default_api.mli
@@ -0,0 +1,16 @@
+(*
+ * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
+ *
+ * Generated by: https://openapi-generator.tech
+ *
+ *)
+
+val eval : eval_request_src_t:Eval_request_src.t -> Eval_response.t Lwt.t
+val get_history : unit -> string Lwt.t
+val get_status : unit -> string Lwt.t
+val instance_by_name : instance_request_name_t:Instance_request_name.t -> Instance_response.t Lwt.t
+val instance_by_src : instance_request_src_t:Instance_request_src.t -> Instance_response.t Lwt.t
+val reset : unit -> string Lwt.t
+val shutdown : unit -> string Lwt.t
+val verify_by_name : verify_request_name_t:Verify_request_name.t -> Verify_response.t Lwt.t
+val verify_by_src : verify_request_src_t:Verify_request_src.t -> Verify_response.t Lwt.t
diff --git a/src/imandra_http_api_client_ocaml/src/models/eval_request_src.ml b/src/imandra_http_api_client_ocaml/src/models/eval_request_src.ml
new file mode 100644
index 0000000..3b6ce9b
--- /dev/null
+++ b/src/imandra_http_api_client_ocaml/src/models/eval_request_src.ml
@@ -0,0 +1,18 @@
+(*
+ * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
+ *
+ * Generated by: https://openapi-generator.tech
+ *
+ *)
+
+type t = {
+    (* Source code string with a given syntax (default Iml) *)
+    src: string;
+    syntax: Enums.syntax option [@default None];
+} [@@deriving yojson { strict = false }, show ];;
+
+let create (src : string) : t = {
+    src = src;
+    syntax = None;
+}
+
diff --git a/src/imandra_http_api_client_ocaml/src/models/eval_response.ml b/src/imandra_http_api_client_ocaml/src/models/eval_response.ml
new file mode 100644
index 0000000..611b74a
--- /dev/null
+++ b/src/imandra_http_api_client_ocaml/src/models/eval_response.ml
@@ -0,0 +1,19 @@
+(*
+ * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
+ *
+ * Generated by: https://openapi-generator.tech
+ *
+ *)
+
+type t = {
+    success: bool;
+    stdout: string option [@default None];
+    stderr: string option [@default None];
+} [@@deriving yojson { strict = false }, show ];;
+
+let create (success : bool) : t = {
+    success = success;
+    stdout = None;
+    stderr = None;
+}
+
diff --git a/src/imandra_http_api_client_ocaml/src/models/hints.ml b/src/imandra_http_api_client_ocaml/src/models/hints.ml
new file mode 100644
index 0000000..13a5225
--- /dev/null
+++ b/src/imandra_http_api_client_ocaml/src/models/hints.ml
@@ -0,0 +1,15 @@
+(*
+ * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
+ *
+ * Generated by: https://openapi-generator.tech
+ *
+ *)
+
+type t = {
+    _method: Model_method.t;
+} [@@deriving yojson { strict = false }, show ];;
+
+let create (_method : Model_method.t) : t = {
+    _method = _method;
+}
+
diff --git a/src/imandra_http_api_client_ocaml/src/models/induct_functional_body.ml b/src/imandra_http_api_client_ocaml/src/models/induct_functional_body.ml
new file mode 100644
index 0000000..63710df
--- /dev/null
+++ b/src/imandra_http_api_client_ocaml/src/models/induct_functional_body.ml
@@ -0,0 +1,15 @@
+(*
+ * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
+ *
+ * Generated by: https://openapi-generator.tech
+ *
+ *)
+
+type t = {
+    f_name: string;
+} [@@deriving yojson { strict = false }, show ];;
+
+let create (f_name : string) : t = {
+    f_name = f_name;
+}
+
diff --git a/src/imandra_http_api_client_ocaml/src/models/induct_structural_body.ml b/src/imandra_http_api_client_ocaml/src/models/induct_structural_body.ml
new file mode 100644
index 0000000..2119ee7
--- /dev/null
+++ b/src/imandra_http_api_client_ocaml/src/models/induct_structural_body.ml
@@ -0,0 +1,17 @@
+(*
+ * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
+ *
+ * Generated by: https://openapi-generator.tech
+ *
+ *)
+
+type t = {
+    vars: string list;
+    style: Enums.inductstructuralstyle;
+} [@@deriving yojson { strict = false }, show ];;
+
+let create (vars : string list) (style : Enums.inductstructuralstyle) : t = {
+    vars = vars;
+    style = style;
+}
+
diff --git a/src/imandra_http_api_client_ocaml/src/models/instance_request_name.ml b/src/imandra_http_api_client_ocaml/src/models/instance_request_name.ml
new file mode 100644
index 0000000..258aa4d
--- /dev/null
+++ b/src/imandra_http_api_client_ocaml/src/models/instance_request_name.ml
@@ -0,0 +1,20 @@
+(*
+ * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
+ *
+ * Generated by: https://openapi-generator.tech
+ *
+ *)
+
+type t = {
+    (* Example: my_fn_name  *)
+    name: string;
+    instance_printer: Printer_details.t option [@default None];
+    hints: Hints.t option [@default None];
+} [@@deriving yojson { strict = false }, show ];;
+
+let create (name : string) : t = {
+    name = name;
+    instance_printer = None;
+    hints = None;
+}
+
diff --git a/src/imandra_http_api_client_ocaml/src/models/instance_request_src.ml b/src/imandra_http_api_client_ocaml/src/models/instance_request_src.ml
new file mode 100644
index 0000000..2fa1bbe
--- /dev/null
+++ b/src/imandra_http_api_client_ocaml/src/models/instance_request_src.ml
@@ -0,0 +1,22 @@
+(*
+ * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
+ *
+ * Generated by: https://openapi-generator.tech
+ *
+ *)
+
+type t = {
+    (* Source code string with a given syntax (default Iml) *)
+    src: string;
+    syntax: Enums.syntax option [@default None];
+    instance_printer: Printer_details.t option [@default None];
+    hints: Hints.t option [@default None];
+} [@@deriving yojson { strict = false }, show ];;
+
+let create (src : string) : t = {
+    src = src;
+    syntax = None;
+    instance_printer = None;
+    hints = None;
+}
+
diff --git a/src/imandra_http_api_client_ocaml/src/models/instance_response.ml b/src/imandra_http_api_client_ocaml/src/models/instance_response.ml
new file mode 100644
index 0000000..d2205aa
--- /dev/null
+++ b/src/imandra_http_api_client_ocaml/src/models/instance_response.ml
@@ -0,0 +1,17 @@
+(*
+ * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
+ *
+ * Generated by: https://openapi-generator.tech
+ *
+ *)
+
+type t = {
+    _type: Enums.instanceresult;
+    body: Verify_response_body.t option [@default None];
+} [@@deriving yojson { strict = false }, show ];;
+
+let create (_type : Enums.instanceresult) : t = {
+    _type = _type;
+    body = None;
+}
+
diff --git a/src/imandra_http_api_client_ocaml/src/models/method_body.ml b/src/imandra_http_api_client_ocaml/src/models/method_body.ml
new file mode 100644
index 0000000..db09618
--- /dev/null
+++ b/src/imandra_http_api_client_ocaml/src/models/method_body.ml
@@ -0,0 +1,21 @@
+(*
+ * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
+ *
+ * Generated by: https://openapi-generator.tech
+ *
+ *)
+
+type t = {
+    steps: int32 option [@default None];
+    name: string;
+    _type: Enums.inducttype;
+    body: Method_induct_body_body.t option [@default None];
+} [@@deriving yojson { strict = false }, show ];;
+
+let create (name : string) (_type : Enums.inducttype) : t = {
+    steps = None;
+    name = name;
+    _type = _type;
+    body = None;
+}
+
diff --git a/src/imandra_http_api_client_ocaml/src/models/method_ext_solver_body.ml b/src/imandra_http_api_client_ocaml/src/models/method_ext_solver_body.ml
new file mode 100644
index 0000000..33cd9f4
--- /dev/null
+++ b/src/imandra_http_api_client_ocaml/src/models/method_ext_solver_body.ml
@@ -0,0 +1,15 @@
+(*
+ * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
+ *
+ * Generated by: https://openapi-generator.tech
+ *
+ *)
+
+type t = {
+    name: string option [@default None];
+} [@@deriving yojson { strict = false }, show ];;
+
+let create () : t = {
+    name = None;
+}
+
diff --git a/src/imandra_http_api_client_ocaml/src/models/method_induct_body.ml b/src/imandra_http_api_client_ocaml/src/models/method_induct_body.ml
new file mode 100644
index 0000000..86e4888
--- /dev/null
+++ b/src/imandra_http_api_client_ocaml/src/models/method_induct_body.ml
@@ -0,0 +1,17 @@
+(*
+ * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
+ *
+ * Generated by: https://openapi-generator.tech
+ *
+ *)
+
+type t = {
+    _type: Enums.inducttype;
+    body: Method_induct_body_body.t option [@default None];
+} [@@deriving yojson { strict = false }, show ];;
+
+let create (_type : Enums.inducttype) : t = {
+    _type = _type;
+    body = None;
+}
+
diff --git a/src/imandra_http_api_client_ocaml/src/models/method_induct_body_body.ml b/src/imandra_http_api_client_ocaml/src/models/method_induct_body_body.ml
new file mode 100644
index 0000000..b35270a
--- /dev/null
+++ b/src/imandra_http_api_client_ocaml/src/models/method_induct_body_body.ml
@@ -0,0 +1,19 @@
+(*
+ * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
+ *
+ * Generated by: https://openapi-generator.tech
+ *
+ *)
+
+type t = {
+    vars: string list;
+    style: Enums.inductstructuralstyle;
+    f_name: string;
+} [@@deriving yojson { strict = false }, show ];;
+
+let create (vars : string list) (style : Enums.inductstructuralstyle) (f_name : string) : t = {
+    vars = vars;
+    style = style;
+    f_name = f_name;
+}
+
diff --git a/src/imandra_http_api_client_ocaml/src/models/method_unroll_body.ml b/src/imandra_http_api_client_ocaml/src/models/method_unroll_body.ml
new file mode 100644
index 0000000..f2a6d34
--- /dev/null
+++ b/src/imandra_http_api_client_ocaml/src/models/method_unroll_body.ml
@@ -0,0 +1,15 @@
+(*
+ * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
+ *
+ * Generated by: https://openapi-generator.tech
+ *
+ *)
+
+type t = {
+    steps: int32 option [@default None];
+} [@@deriving yojson { strict = false }, show ];;
+
+let create () : t = {
+    steps = None;
+}
+
diff --git a/src/imandra_http_api_client_ocaml/src/models/model_method.ml b/src/imandra_http_api_client_ocaml/src/models/model_method.ml
new file mode 100644
index 0000000..b782089
--- /dev/null
+++ b/src/imandra_http_api_client_ocaml/src/models/model_method.ml
@@ -0,0 +1,17 @@
+(*
+ * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
+ *
+ * Generated by: https://openapi-generator.tech
+ *
+ *)
+
+type t = {
+    _type: Enums.methodtype;
+    body: Method_body.t option [@default None];
+} [@@deriving yojson { strict = false }, show ];;
+
+let create (_type : Enums.methodtype) : t = {
+    _type = _type;
+    body = None;
+}
+
diff --git a/src/imandra_http_api_client_ocaml/src/models/printer_details.ml b/src/imandra_http_api_client_ocaml/src/models/printer_details.ml
new file mode 100644
index 0000000..5293385
--- /dev/null
+++ b/src/imandra_http_api_client_ocaml/src/models/printer_details.ml
@@ -0,0 +1,19 @@
+(*
+ * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
+ *
+ * Generated by: https://openapi-generator.tech
+ *
+ *)
+
+type t = {
+    (* Name of printer function. Should be of type `t -> string`, where `t` is the type returned by your instance constraint function. *)
+    name: string;
+    (* Name of the variable in your instance constraint function, e.g. `x` for `fun x -> true`. In an `imandra-repl` session, this is the name of the property on the generated CX module, e.g. the `x` in `CX.x`. *)
+    cx_var_name: string;
+} [@@deriving yojson { strict = false }, show ];;
+
+let create (name : string) (cx_var_name : string) : t = {
+    name = name;
+    cx_var_name = cx_var_name;
+}
+
diff --git a/src/imandra_http_api_client_ocaml/src/models/response_error.ml b/src/imandra_http_api_client_ocaml/src/models/response_error.ml
new file mode 100644
index 0000000..390292e
--- /dev/null
+++ b/src/imandra_http_api_client_ocaml/src/models/response_error.ml
@@ -0,0 +1,19 @@
+(*
+ * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
+ *
+ * Generated by: https://openapi-generator.tech
+ *
+ *)
+
+type t = {
+    error: string;
+    stdout: string option [@default None];
+    stderr: string option [@default None];
+} [@@deriving yojson { strict = false }, show ];;
+
+let create (error : string) : t = {
+    error = error;
+    stdout = None;
+    stderr = None;
+}
+
diff --git a/src/imandra_http_api_client_ocaml/src/models/response_instance.ml b/src/imandra_http_api_client_ocaml/src/models/response_instance.ml
new file mode 100644
index 0000000..b345f26
--- /dev/null
+++ b/src/imandra_http_api_client_ocaml/src/models/response_instance.ml
@@ -0,0 +1,19 @@
+(*
+ * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
+ *
+ * Generated by: https://openapi-generator.tech
+ *
+ *)
+
+type t = {
+    model: Response_model.t option [@default None];
+    _type: Enums.instancetype option [@default None];
+    src: string option [@default None];
+} [@@deriving yojson { strict = false }, show ];;
+
+let create () : t = {
+    model = None;
+    _type = None;
+    src = None;
+}
+
diff --git a/src/imandra_http_api_client_ocaml/src/models/response_model.ml b/src/imandra_http_api_client_ocaml/src/models/response_model.ml
new file mode 100644
index 0000000..1eec06c
--- /dev/null
+++ b/src/imandra_http_api_client_ocaml/src/models/response_model.ml
@@ -0,0 +1,18 @@
+(*
+ * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
+ *
+ * Generated by: https://openapi-generator.tech
+ *
+ *)
+
+type t = {
+    syntax: Enums.syntax option [@default None];
+    (* Source code string with a given syntax (default Iml) *)
+    src: string option [@default None];
+} [@@deriving yojson { strict = false }, show ];;
+
+let create () : t = {
+    syntax = None;
+    src = None;
+}
+
diff --git a/src/imandra_http_api_client_ocaml/src/models/up_to_body.ml b/src/imandra_http_api_client_ocaml/src/models/up_to_body.ml
new file mode 100644
index 0000000..d701f4b
--- /dev/null
+++ b/src/imandra_http_api_client_ocaml/src/models/up_to_body.ml
@@ -0,0 +1,17 @@
+(*
+ * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
+ *
+ * Generated by: https://openapi-generator.tech
+ *
+ *)
+
+type t = {
+    steps: int32;
+    bound: int32 option [@default None];
+} [@@deriving yojson { strict = false }, show ];;
+
+let create (steps : int32) : t = {
+    steps = steps;
+    bound = None;
+}
+
diff --git a/src/imandra_http_api_client_ocaml/src/models/verify_request_name.ml b/src/imandra_http_api_client_ocaml/src/models/verify_request_name.ml
new file mode 100644
index 0000000..258aa4d
--- /dev/null
+++ b/src/imandra_http_api_client_ocaml/src/models/verify_request_name.ml
@@ -0,0 +1,20 @@
+(*
+ * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
+ *
+ * Generated by: https://openapi-generator.tech
+ *
+ *)
+
+type t = {
+    (* Example: my_fn_name  *)
+    name: string;
+    instance_printer: Printer_details.t option [@default None];
+    hints: Hints.t option [@default None];
+} [@@deriving yojson { strict = false }, show ];;
+
+let create (name : string) : t = {
+    name = name;
+    instance_printer = None;
+    hints = None;
+}
+
diff --git a/src/imandra_http_api_client_ocaml/src/models/verify_request_src.ml b/src/imandra_http_api_client_ocaml/src/models/verify_request_src.ml
new file mode 100644
index 0000000..2fa1bbe
--- /dev/null
+++ b/src/imandra_http_api_client_ocaml/src/models/verify_request_src.ml
@@ -0,0 +1,22 @@
+(*
+ * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
+ *
+ * Generated by: https://openapi-generator.tech
+ *
+ *)
+
+type t = {
+    (* Source code string with a given syntax (default Iml) *)
+    src: string;
+    syntax: Enums.syntax option [@default None];
+    instance_printer: Printer_details.t option [@default None];
+    hints: Hints.t option [@default None];
+} [@@deriving yojson { strict = false }, show ];;
+
+let create (src : string) : t = {
+    src = src;
+    syntax = None;
+    instance_printer = None;
+    hints = None;
+}
+
diff --git a/src/imandra_http_api_client_ocaml/src/models/verify_response.ml b/src/imandra_http_api_client_ocaml/src/models/verify_response.ml
new file mode 100644
index 0000000..41affb7
--- /dev/null
+++ b/src/imandra_http_api_client_ocaml/src/models/verify_response.ml
@@ -0,0 +1,17 @@
+(*
+ * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
+ *
+ * Generated by: https://openapi-generator.tech
+ *
+ *)
+
+type t = {
+    _type: Enums.verifyresult;
+    body: Verify_response_body.t option [@default None];
+} [@@deriving yojson { strict = false }, show ];;
+
+let create (_type : Enums.verifyresult) : t = {
+    _type = _type;
+    body = None;
+}
+
diff --git a/src/imandra_http_api_client_ocaml/src/models/verify_response_body.ml b/src/imandra_http_api_client_ocaml/src/models/verify_response_body.ml
new file mode 100644
index 0000000..c375b4c
--- /dev/null
+++ b/src/imandra_http_api_client_ocaml/src/models/verify_response_body.ml
@@ -0,0 +1,21 @@
+(*
+ * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
+ *
+ * Generated by: https://openapi-generator.tech
+ *
+ *)
+
+type t = {
+    steps: int32;
+    bound: int32 option [@default None];
+    instance: Response_instance.t;
+    unknown_reason: string;
+} [@@deriving yojson { strict = false }, show ];;
+
+let create (steps : int32) (instance : Response_instance.t) (unknown_reason : string) : t = {
+    steps = steps;
+    bound = None;
+    instance = instance;
+    unknown_reason = unknown_reason;
+}
+
diff --git a/src/imandra_http_api_client_ocaml/src/models/with_instance_body.ml b/src/imandra_http_api_client_ocaml/src/models/with_instance_body.ml
new file mode 100644
index 0000000..7cc2209
--- /dev/null
+++ b/src/imandra_http_api_client_ocaml/src/models/with_instance_body.ml
@@ -0,0 +1,15 @@
+(*
+ * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
+ *
+ * Generated by: https://openapi-generator.tech
+ *
+ *)
+
+type t = {
+    instance: Response_instance.t;
+} [@@deriving yojson { strict = false }, show ];;
+
+let create (instance : Response_instance.t) : t = {
+    instance = instance;
+}
+
diff --git a/src/imandra_http_api_client_ocaml/src/models/with_unknown_reason_body.ml b/src/imandra_http_api_client_ocaml/src/models/with_unknown_reason_body.ml
new file mode 100644
index 0000000..b852516
--- /dev/null
+++ b/src/imandra_http_api_client_ocaml/src/models/with_unknown_reason_body.ml
@@ -0,0 +1,15 @@
+(*
+ * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
+ *
+ * Generated by: https://openapi-generator.tech
+ *
+ *)
+
+type t = {
+    unknown_reason: string;
+} [@@deriving yojson { strict = false }, show ];;
+
+let create (unknown_reason : string) : t = {
+    unknown_reason = unknown_reason;
+}
+
diff --git a/src/imandra_http_api_client_ocaml/src/support/enums.ml b/src/imandra_http_api_client_ocaml/src/support/enums.ml
new file mode 100644
index 0000000..54e8c57
--- /dev/null
+++ b/src/imandra_http_api_client_ocaml/src/support/enums.ml
@@ -0,0 +1,90 @@
+(*
+ * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
+ *
+ * Generated by: https://openapi-generator.tech
+ *
+ *)
+
+type syntax = [
+| `Iml [@printer fun fmt _ -> Format.pp_print_string fmt "iml"] [@name "iml"]
+| `Reason [@printer fun fmt _ -> Format.pp_print_string fmt "reason"] [@name "reason"]
+] [@@deriving yojson, show { with_path = false }];;
+
+let syntax_of_yojson json = syntax_of_yojson (`List [json])
+let syntax_to_yojson e =
+    match syntax_to_yojson e with
+    | `List [json] -> json
+    | json -> json
+
+type inductstructuralstyle = [
+| `Multiplicative [@printer fun fmt _ -> Format.pp_print_string fmt "multiplicative"] [@name "multiplicative"]
+| `Additive [@printer fun fmt _ -> Format.pp_print_string fmt "additive"] [@name "additive"]
+] [@@deriving yojson, show { with_path = false }];;
+
+let inductstructuralstyle_of_yojson json = inductstructuralstyle_of_yojson (`List [json])
+let inductstructuralstyle_to_yojson e =
+    match inductstructuralstyle_to_yojson e with
+    | `List [json] -> json
+    | json -> json
+
+type verifyresult = [
+| `Proved [@printer fun fmt _ -> Format.pp_print_string fmt "proved"] [@name "proved"]
+| `Proved_upto [@printer fun fmt _ -> Format.pp_print_string fmt "proved_upto"] [@name "proved_upto"]
+| `Refuted [@printer fun fmt _ -> Format.pp_print_string fmt "refuted"] [@name "refuted"]
+| `Unknown [@printer fun fmt _ -> Format.pp_print_string fmt "unknown"] [@name "unknown"]
+] [@@deriving yojson, show { with_path = false }];;
+
+let verifyresult_of_yojson json = verifyresult_of_yojson (`List [json])
+let verifyresult_to_yojson e =
+    match verifyresult_to_yojson e with
+    | `List [json] -> json
+    | json -> json
+
+type instancetype = [
+| `Counterexample [@printer fun fmt _ -> Format.pp_print_string fmt "counterexample"] [@name "counterexample"]
+| `Instance [@printer fun fmt _ -> Format.pp_print_string fmt "instance"] [@name "instance"]
+] [@@deriving yojson, show { with_path = false }];;
+
+let instancetype_of_yojson json = instancetype_of_yojson (`List [json])
+let instancetype_to_yojson e =
+    match instancetype_to_yojson e with
+    | `List [json] -> json
+    | json -> json
+
+type methodtype = [
+| `Unroll [@printer fun fmt _ -> Format.pp_print_string fmt "unroll"] [@name "unroll"]
+| `Ext_solver [@printer fun fmt _ -> Format.pp_print_string fmt "ext_solver"] [@name "ext_solver"]
+| `Auto [@printer fun fmt _ -> Format.pp_print_string fmt "auto"] [@name "auto"]
+| `Induct [@printer fun fmt _ -> Format.pp_print_string fmt "induct"] [@name "induct"]
+] [@@deriving yojson, show { with_path = false }];;
+
+let methodtype_of_yojson json = methodtype_of_yojson (`List [json])
+let methodtype_to_yojson e =
+    match methodtype_to_yojson e with
+    | `List [json] -> json
+    | json -> json
+
+type instanceresult = [
+| `Unsat [@printer fun fmt _ -> Format.pp_print_string fmt "unsat"] [@name "unsat"]
+| `Unsat_upto [@printer fun fmt _ -> Format.pp_print_string fmt "unsat_upto"] [@name "unsat_upto"]
+| `Sat [@printer fun fmt _ -> Format.pp_print_string fmt "sat"] [@name "sat"]
+| `Unknown [@printer fun fmt _ -> Format.pp_print_string fmt "unknown"] [@name "unknown"]
+] [@@deriving yojson, show { with_path = false }];;
+
+let instanceresult_of_yojson json = instanceresult_of_yojson (`List [json])
+let instanceresult_to_yojson e =
+    match instanceresult_to_yojson e with
+    | `List [json] -> json
+    | json -> json
+
+type inducttype = [
+| `Functional [@printer fun fmt _ -> Format.pp_print_string fmt "functional"] [@name "functional"]
+| `Structural [@printer fun fmt _ -> Format.pp_print_string fmt "structural"] [@name "structural"]
+| `Default [@printer fun fmt _ -> Format.pp_print_string fmt "default"] [@name "default"]
+] [@@deriving yojson, show { with_path = false }];;
+
+let inducttype_of_yojson json = inducttype_of_yojson (`List [json])
+let inducttype_to_yojson e =
+    match inducttype_to_yojson e with
+    | `List [json] -> json
+    | json -> json
diff --git a/src/imandra_http_api_client_ocaml/src/support/jsonSupport.ml b/src/imandra_http_api_client_ocaml/src/support/jsonSupport.ml
new file mode 100644
index 0000000..4b0fac7
--- /dev/null
+++ b/src/imandra_http_api_client_ocaml/src/support/jsonSupport.ml
@@ -0,0 +1,55 @@
+open Ppx_deriving_yojson_runtime
+
+let unwrap to_json json =
+    match to_json json with
+    | Result.Ok json -> json
+    | Result.Error s -> failwith s
+
+let to_int json =
+    match json with
+    | `Int x -> x
+    | `Intlit s -> int_of_string s
+    | _ -> failwith "JsonSupport.to_int"
+
+let to_bool json =
+    match json with
+    | `Bool x -> x
+    | _ -> failwith "JsonSupport.to_bool"
+
+let to_float json =
+    match json with
+    | `Float x -> x
+    | _ -> failwith "JsonSupport.to_float"
+
+let to_string json =
+    match json with
+    | `String s -> s
+    | _ -> failwith "JsonSupport.to_string"
+
+let to_int32 json : int32 =
+    match json with
+    | `Int x -> Int32.of_int x
+    | `Intlit s -> Int32.of_string s
+    | _ -> failwith "JsonSupport.to_int32"
+
+let to_int64 json : int64 =
+    match json with
+    | `Int x -> Int64.of_int x
+    | `Intlit s -> Int64.of_string s
+    | _ -> failwith "JsonSupport.to_int64"
+
+let of_int x = `Int x
+
+let of_bool b = `Bool b
+
+let of_float x = `Float x
+
+let of_string s = `String s
+
+let of_int32 x = `Intlit (Int32.to_string x)
+
+let of_int64 x = `Intlit (Int64.to_string x)
+
+let of_list_of of_f l = `List (List.map of_f l)
+
+let of_map_of of_f l = `Assoc (List.map (fun (k, v) -> (k, of_f v)) l)
\ No newline at end of file
diff --git a/src/imandra_http_api_client_ocaml/src/support/request.ml b/src/imandra_http_api_client_ocaml/src/support/request.ml
new file mode 100644
index 0000000..cb4e9fb
--- /dev/null
+++ b/src/imandra_http_api_client_ocaml/src/support/request.ml
@@ -0,0 +1,97 @@
+let api_key = ""
+let base_url = "http://localhost:3000"
+let default_headers = Cohttp.Header.init_with "Content-Type" "application/json"
+
+let option_fold f default o =
+  match o with
+  | Some v -> f v
+  | None -> default
+
+let build_uri operation_path = Uri.of_string (base_url ^ operation_path)
+
+let add_string_header headers key value =
+  Cohttp.Header.add headers key value
+
+let add_string_header_multi headers key values =
+  Cohttp.Header.add_multi headers key values
+
+let add_header headers key to_string value =
+  Cohttp.Header.add headers key (to_string value)
+
+let add_header_multi headers key to_string value =
+  Cohttp.Header.add_multi headers key (to_string value)
+
+let maybe_add_header headers key to_string value =
+  option_fold (add_header headers key to_string) headers value
+
+let maybe_add_header_multi headers key to_string value =
+  option_fold (add_header_multi headers key to_string) headers value
+
+let write_string_body s = Cohttp_lwt.Body.of_string s
+
+let write_json_body payload =
+  Cohttp_lwt.Body.of_string (Yojson.Safe.to_string payload ~std:true)
+
+let write_as_json_body to_json payload = write_json_body (to_json payload)
+
+let handle_response resp on_success_handler =
+  match Cohttp_lwt.Response.status resp with
+  | #Cohttp.Code.success_status -> on_success_handler ()
+  | s -> failwith ("Server responded with status " ^ Cohttp.Code.(reason_phrase_of_code (code_of_status s)))
+
+let handle_unit_response resp = handle_response resp (fun () -> Lwt.return ())
+
+let read_json_body resp body =
+  handle_response resp (fun () ->
+    (Lwt.(Cohttp_lwt.Body.to_string body >|= Yojson.Safe.from_string)))
+
+let read_json_body_as of_json resp body =
+  Lwt.(read_json_body resp body >|= of_json)
+
+let read_json_body_as_list resp body =
+  Lwt.(read_json_body resp body >|= Yojson.Safe.Util.to_list)
+
+let read_json_body_as_list_of of_json resp body =
+  Lwt.(read_json_body_as_list resp body >|= List.map of_json)
+
+let read_json_body_as_map resp body =
+  Lwt.(read_json_body resp body >|= Yojson.Safe.Util.to_assoc)
+
+let read_json_body_as_map_of of_json resp body =
+  Lwt.(read_json_body_as_map resp body >|= List.map (fun (s, v) -> (s, of_json v)))
+
+let replace_string_path_param uri param_name param_value =
+  let regexp = Str.regexp (Str.quote ("{" ^ param_name ^ "}")) in
+  let path = Str.global_replace regexp param_value (Uri.pct_decode (Uri.path uri)) in
+  Uri.with_path uri path
+
+let replace_path_param uri param_name to_string param_value =
+  replace_string_path_param uri param_name (to_string param_value)
+
+let maybe_replace_path_param uri param_name to_string param_value =
+  option_fold (replace_path_param uri param_name to_string) uri param_value
+
+let add_query_param uri param_name to_string param_value =
+  Uri.add_query_param' uri (param_name, to_string param_value)
+
+let add_query_param_list uri param_name to_string param_value =
+  Uri.add_query_param uri (param_name, to_string param_value)
+
+let maybe_add_query_param uri param_name to_string param_value =
+  option_fold (add_query_param uri param_name to_string) uri param_value
+
+let init_form_encoded_body () = ""
+
+let add_form_encoded_body_param params param_name to_string param_value =
+  let new_param_enc = Printf.sprintf {|%s=%s|} (Uri.pct_encode param_name) (Uri.pct_encode (to_string param_value)) in
+  if params = ""
+  then new_param_enc
+  else Printf.sprintf {|%s&%s|} params new_param_enc
+
+let add_form_encoded_body_param_list params param_name to_string new_params =
+  add_form_encoded_body_param params param_name (String.concat ",") (to_string new_params)
+
+let maybe_add_form_encoded_body_param params param_name to_string param_value =
+  option_fold (add_form_encoded_body_param params param_name to_string) params param_value
+
+let finalize_form_encoded_body body = Cohttp_lwt.Body.of_string body
diff --git a/src/imandra_http_api_client_ocaml/test/api_test.ml b/src/imandra_http_api_client_ocaml/test/api_test.ml
new file mode 100644
index 0000000..8cdca6c
--- /dev/null
+++ b/src/imandra_http_api_client_ocaml/test/api_test.ml
@@ -0,0 +1,10 @@
+open Imandra_http_api_client_ocaml 
+
+module Fmt = CCFormat 
+let () = 
+  let eval_request = Default_api.eval ~eval_request_src_t:{
+  Eval_request_src.src = "let h x = x + 1";
+  Eval_request_src.syntax = Some `Iml
+} in 
+let response = Lwt_main.run eval_request in 
+Fmt.printf "@[%a@.@]" Eval_response.pp response
\ No newline at end of file
diff --git a/src/imandra_http_api_client_ocaml/test/dune b/src/imandra_http_api_client_ocaml/test/dune
new file mode 100644
index 0000000..ec652ad
--- /dev/null
+++ b/src/imandra_http_api_client_ocaml/test/dune
@@ -0,0 +1,5 @@
+(include_subdirs no)
+
+(test
+ (name api_test)
+ (libraries imandra_http_api_client_ocaml containers))
